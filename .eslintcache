[{"C:\\Users\\LENOVO\\Desktop\\01-starting-project\\src\\index.js":"1","C:\\Users\\LENOVO\\Desktop\\01-starting-project\\src\\App.js":"2","C:\\Users\\LENOVO\\Desktop\\01-starting-project\\src\\components\\SimpleInput.js":"3","C:\\Users\\LENOVO\\Desktop\\01-starting-project\\src\\components\\useInput.js":"4","C:\\Users\\LENOVO\\Desktop\\01-starting-project\\src\\components\\BasicForm.js":"5"},{"size":142,"mtime":1653932165809,"results":"6","hashOfConfig":"7"},{"size":248,"mtime":1653990614112,"results":"8","hashOfConfig":"7"},{"size":1919,"mtime":1653990583362,"results":"9","hashOfConfig":"7"},{"size":1316,"mtime":1653989770148,"results":"10","hashOfConfig":"7"},{"size":2387,"mtime":1653990513494,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"15iql72",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"C:\\Users\\LENOVO\\Desktop\\01-starting-project\\src\\index.js",[],["24","25"],"C:\\Users\\LENOVO\\Desktop\\01-starting-project\\src\\App.js",[],"C:\\Users\\LENOVO\\Desktop\\01-starting-project\\src\\components\\SimpleInput.js",["26","27"],"C:\\Users\\LENOVO\\Desktop\\01-starting-project\\src\\components\\useInput.js",[],"C:\\Users\\LENOVO\\Desktop\\01-starting-project\\src\\components\\BasicForm.js",["28","29"],"import { useInput } from \"./useInput\";\n\n\nconst isEmpty = (value) => value.trim() !== ''\nconst isEmail = (value) => value.includes('@')\n\nconst BasicForm = (props) => {\n  const  {\n    value: enteredName, \n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler\n  } = useInput(isEmpty)\n\n  const  {\n    value: enteredSurname, \n    isValid: enteredSurnameIsValid,\n    hasError: surnameInputHasError,\n    valueChangeHandler: surnameChangeHandler,\n    inputBlurHandler: surnameBlurHandler\n  } = useInput(isEmpty)\n\n  const  {\n    value: enteredEmail, \n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler\n  } = useInput(isEmail)\n\n  let formIsValid = false\n\n  if(enteredNameIsValid) {\n    formIsValid = true\n  }\n\n  const submitHandler = event => {\n    event.preventDefault()\n\n    if (!enteredNameIsValid) {\n      return\n    }\n  }\n\n  const nameClasses = nameInputHasError ? 'form-control invalid' : 'form-control'\n  const surnameClasses = surnameInputHasError ? 'form-control invalid' : 'form-control'\n  const emailClasses = emailInputHasError ? 'form-control invalid' : 'form-control'\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className='control-group'>\n        <div className={nameClasses}>\n          <label htmlFor='name'>First Name</label>\n          <input type='text' id='name' value={enteredName} onChange={nameChangeHandler} onBlur={nameBlurHandler}/>\n          {nameInputHasError && <p>Please enter ur name</p>}\n        </div>\n        \n        <div className={surnameClasses}>\n          <label htmlFor='name'>Last Name</label>\n          <input type='text' id='name' value={enteredSurname} onChange={surnameChangeHandler} onBlur={surnameBlurHandler} />\n          {surnameInputHasError && <p>Please enter ur surname</p>}\n        </div>\n      </div>\n\n      <div className={emailClasses}>\n        <label htmlFor='name'>E-Mail Address</label>\n        <input type='text' id='name' value={enteredEmail} onChange={emailChangeHandler} onBlur={emailBlurHandler} />\n        {emailInputHasError && <p>Please enter ur email</p>}\n      </div>\n\n      <div className='form-actions'>\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":1,"column":17,"nodeType":"36","messageId":"37","endLine":1,"endColumn":25},{"ruleId":"34","severity":1,"message":"38","line":14,"column":14,"nodeType":"36","messageId":"37","endLine":14,"endColumn":33},{"ruleId":"34","severity":1,"message":"39","line":18,"column":14,"nodeType":"36","messageId":"37","endLine":18,"endColumn":35},{"ruleId":"34","severity":1,"message":"38","line":26,"column":14,"nodeType":"36","messageId":"37","endLine":26,"endColumn":33},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'enteredEmailIsValid' is assigned a value but never used.","'enteredSurnameIsValid' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]